import bcrypt from 'bcryptjs';

export const encryptPassword = async (password) => {

    //Generating a salt of 10 iterations
    const salt = await bcrypt.genSalt(10);
    // The password is returned hashed with salt added to it
    return await bcrypt.hash(password, salt);
}

export const validatePassword = async (password, receivedPassword) => {
    return await bcrypt.compare(password, receivedPassword);
}

export const capitalizeString = (str) => {

    const arr = str.split(" ");
    for(var i = 0; i < arr.length; i++)
        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);
    const capitalize = arr.join(" ");
    return capitalize;
}

export const generatePassword = () => {
    const alphanumeric = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    let autoGeneratedPassword = '';
    for (let i = 0; i < 8; i++)
        autoGeneratedPassword += alphanumeric[Math.floor(Math.random() * alphanumeric.length)];
    return autoGeneratedPassword;
}

export const methods = {
    encryptPassword,
    validatePassword,
    capitalizeString,
    generatePassword
}